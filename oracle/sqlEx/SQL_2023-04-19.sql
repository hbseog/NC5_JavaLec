--1) 어제 만든 SCORE_STGR 테이블의 SNO 컬럼에 INDEX를 추가하세요.
CREATE INDEX SCO_STRG_IND
    ON SCORE_STGR (SNO);

--2) 어제 만든 ST_COURSEPF 테이블의 SNO, CNO, PNO 다중 컬럼에 INDEX를 추가하세요.
CREATE INDEX ST_COURSEPF_SCP_IND
    ON ST_COURSEPF (SNO, CNO, PNO);

--뷰 이름은 자유
--1) 학생의 학점 4.5 만점으로 환산된 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW ST_AVR_VIEW(SNO, SNAME, AV)
AS
(
SELECT SNO, SNAME, ROUND(AVR * 1.125, 2) AS AV
FROM STUDENT
GROUP BY SNO, SNAME, AVR
    );
SELECT *
FROM ST_AVR_VIEW;
--2) 각 과목별 평균 점수를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW COU_AVR_VIEW(CNO, CNAME, AV)
AS
(
SELECT CNO, CNAME, AVG(RESULT)
FROM COURSE
         NATURAL JOIN C##STUDY.SCORE
GROUP BY CNO, CNAME
    );
SELECT *
FROM COU_AVR_VIEW;

--3) 각 사원과 관리자의 이름을 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW EMP_MGR_VIEW(ENO, ENAME, MGRNAME)
AS
(
SELECT A.ENO, A.ENAME, E.ENAME
FROM EMP E
         RIGHT JOIN(SELECT ENO, ENAME, MGR FROM EMP) A
                   ON A.MGR = E.ENO
    )

SELECT *
FROM EMP_MGR_VIEW;

--4) 각 과목별 기말고사 평가 등급(A~F)까지와 해당 학생 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW GRA_STINFO_VIEW(SNO, SNAME, CNO, CNAME, RESULT, GRADE)
AS
(
SELECT SNO, SNAME, CNO, CNAME, RESULT, GRADE
FROM STUDENT
         NATURAL JOIN C##STUDY.SCORE
         NATURAL JOIN COURSE
         JOIN SCGRADE
              ON RESULT BETWEEN LOSCORE AND HISCORE
    );
SELECT *
FROM GRA_STINFO_VIEW;
--5) 물리학과 교수의 과목을 수강하는 학생의 명단을 검색할 뷰를 생성하세요.
CREATE OR REPLACE VIEW PRO_COU_VIEW (SECTION, CNAME, SNO, SNAME)
AS
(
SELECT SECTION, CNAME, SNO, SNAME
FROM STUDENT
         NATURAL JOIN PROFESSOR
         NATURAL JOIN COURSE
WHERE SECTION = '물리'
    );
SELECT *
FROM PRO_COU_VIEW;
--1) 4.5 환산 평점이 가장 높은 3인의 학생을 검색하세요.
SELECT ROWNUM, SNO, SNAME, AV
FROM (SELECT SNO, SNAME, ROUND(AVG(AVR * 1.125), 2) AS AV
      FROM STUDENT
      GROUP BY SNO, SNAME
      ORDER BY AV DESC)
WHERE ROWNUM <= 3;

--2) 기말고사 과목별 평균이 높은 3과목을 검색하세요.
SELECT ROWNUM, CNO, CNAME, AV
FROM (SELECT CNO, CNAME, AVG(RESULT) AS AV
      FROM COURSE
               NATURAL JOIN C##STUDY.SCORE
      GROUP BY CNO, CNAME
      ORDER BY AV DESC)
WHERE ROWNUM <= 3;

--3) 학과별, 학년별, 기말고사 평균이 순위 3까지를 검색하세요.(학과, 학년, 평균점수 검색)
SELECT ROWNUM, MAJOR, SYEAR, AV
FROM (SELECT MAJOR, SYEAR, AVG(RESULT) AS AV
      FROM STUDENT
               NATURAL JOIN C##STUDY.SCORE
      GROUP BY MAJOR, SYEAR
      ORDER BY AV DESC)
WHERE ROWNUM <= 3;

--4) 기말고사 성적이 높은 과목을 담당하는 교수 3인을 검색하세요.(교수이름, 과목명, 평균점수 검색)
SELECT ROWNUM, PNAME, CNAME, AV
FROM (SELECT PNAME, CNAME, AVG(RESULT) AS AV
      FROM PROFESSOR
               NATURAL JOIN C##STUDY.SCORE
               NATURAL JOIN COURSE
      GROUP BY PNAME, CNAME
      ORDER BY AV DESC)
WHERE ROWNUM <= 3

--5) 교수별로 현재 수강중인 학생의 수를 검색하세요.
SELECT PNO, PNAME, C
FROM (SELECT PNO, PNAME, COUNT(*) AS C
      FROM PROFESSOR
               NATURAL JOIN STUDENT
               NATURAL JOIN C##STUDY.SCORE
               NATURAL JOIN COURSE
      GROUP BY PNAME, PNO)

--1) CNO이 PK인 COURSE_PK 테이블을 생성하세요.(1번 방식으로)
create table COURSE_PK
(
    CNO    VARCHAR2(8) PRIMARY KEY,
    CNAME  VARCHAR2(20),
    ST_NUM NUMBER(1),
    PNO    VARCHAR2(8)
)

--2) PNO이 PK인 PROFESSOR_PK 테이블을 생성하세요.(2번 방식으로)
create table PROFESSOR_PK
(
    PNO      VARCHAR2(8),
    PNAME    VARCHAR2(20),
    SECTION  VARCHAR2(20),
    ORDERS   VARCHAR2(10),
    HIREDATE DATE,
    CONSTRAINT PK_PRO PRIMARY KEY (PNO)
)

--3) PF_TEMP 테이블에 PNO을 PK로 추가하세요.
ALTER TABLE PF_TEMP
    ADD CONSTRAINT PK_PF_TEMP PRIMARY KEY (PNO);

--4) COURSE_PROFESSOR 테이블에 CNO, PNO을 PK로 추가하세요.
ALTER TABLE COURSE_PROFESSOR
    ADD CONSTRAINT PK_COU_PRO PRIMARY KEY (CNO, PNO);

--5) BOARD_NO(NUMBER)를 PK로 갖으면서 BOARD_TITLE(VARCHAR2(200)), BOARD_CONTENT(VARCHAR2(2000)),
--   BOARD_WRITER(VARCHAR2(20)), BOARD_FRGT_DATE(DATE), BOARD_LMDF_DATE(DATE) 컬럼을 갖는 T_BOARD 테이블을 생성하세요.
CREATE TABLE T_BOARD
(
    BOARD_NO        NUMBER PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(200),
    BOARD_CONTENT   VARCHAR2(2000),
    BOARD_WRITER    VARCHAR2(20),
    BOARD_FRGT_DATE DATE,
    BOARD_LMDF_DATE DATE
)

--6) BOARD_NO(NUMBER), BOARD_FILE_NO(NUMBER)를 PK로 갖으면서 BOARD_FILE_NM(VARCHAR2(200)), BOARD_FILE_PATH(VARCHAR2(2000)),
--   ORIGIN_FILE_NM(VARCHAR2(200)) 컬럼을 갖는 T_BOARD_FILE 테이블을 생성하세요.
CREATE TABLE T_BOARD_FILE
(
    BOARD_NO NUMBER,
    BOARD_FILE_NO NUMBER,
    BOARD_FILE_NM VARCHAR2(200),
    BOARD_FILE_PATH VARCHAR2(2000),
    ORIGIN_FILE_NM VARCHAR2(200),
    CONSTRAINT AAA PRIMARY KEY(BOARD_NO, BOARD_FILE_NO)
);